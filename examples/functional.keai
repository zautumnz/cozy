# Note: semicolons are optional, most of the time!

# Return true if the given number is even
let even? = fn (n) {
    return n % 2 == 0
}
# functions have names
print(even?.name())

# Return true if the given number is odd.
let odd? = fn (n) {
    return n % 2 == 1
}

# Return true if the given number is prime
let prime? = fn (n) {
    # negative numbers are not prime
    if n < 0 {
        return false
    }

    # 0, 1, 2 are prime
    if n < 3 {
        return true
    }

    # Now the rest - we're testing all factors between 2 & SQRT(n).
    mutable i = util.int(math.sqrt(n)) + 1

    for i > 2 {
        i--
        if n % i == 0 {
            return false
        }
    }
    return true
}

# Square the given number.
let square = fn (n) { return n * n }

# The list of numbers we'll operate upon.
let ints = [
    0, 1, 2, 3, 4,
    5, 6, 7, 8, 9,
    10, 11, 12, 13, 14,
    15, 16, 17, 18, 19, 20
]

# Show them ..
print("\nIntegers:")
print("\t", ints)

# Show their squares
print("\nSquares:")
print("\t", ints.map(square))

# Show their cubes, using an anonymous function
print("\nCubes:")
print("\t", ints.map(fn (n) { return n * n * n }))
print("\nCubes via POW:")
print("\t", ints.map(fn (n) { return n ** 3 }))

# Now use our functional-methods to show odd/even/prime
# numbers contained in our list.
print("\nOdd numbers:")
print("\t", ints.filter(odd?))
print("\nEven numbers:")
print("\t", ints.filter(even?))
print("\nPrime numbers:")
print("\t", ints.filter(prime?))

# IIFEs (all of these are valid syntax):
print(fn () { true }())
print((fn () { true })())
print((fn () { true }()))

# callbacks:
let cb_parent = fn (x, y, cb) {
    let z = x + y
    return cb(z)
}
cb_parent(1, 2, fn (val) {
    print("result is", val)
})

# closures, nested functions, implicit returns
let lots_of_nesting = fn () {
    fn () {
        fn () {
            true
        }
    }
}
print(lots_of_nesting()()())

# memoization
let adder = fn (q, w, e) {
    return q + w + e
}
let memoized = util.memoize(adder)
print(memoized(1, 2, 3))
# second call will fetch from in-mem cache
print(memoized(1, 2, 3))

# curry keeps returning a new function
# as long as the result gets called with any args;
# when it's called with no args, then it calls the
# original function with all the collected args.
let curried = util.curry(adder)
let first = curried(1)
let second = first(2)
let third = second(3)()
print(third)
