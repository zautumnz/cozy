let fs.ls = fn () {
    'fs.ls takes a path and an optional boolean,
    the equivalent of `ls` with an optional -A flag'
    mutable all = false
    let opts = util.array_from(...)

    let p = opts[0]

    if util.len(opts) > 1 {
        all = opts[1]
    }

    mutable res = fs.glob(p + "/*")

    if !all {
        res = res.filter(fn (x) {
            return x.find(".") != 0
        })
    }

    return res.join("\n")
}

let fs.write_file = fn (f_name, contents) {
    'write_file takes a file name and contents and writes
    the contents to that file. It\'s a light wrapper over
    fs.open/fs.write/file handle.close.'
    let fh = fs.open(f_name, "w")
    fh.write(contents)
    fh.close()
}

let fs.write_json = fn (f_name, contents, indent = true) {
    'write_json takes a file name, contents (any keai value),
    and a third argument to specify if the json should be indented
    (default: true); serializes the keai value; and writes the file.
    It\'s a light wrapper over fs.write_file.'
    let c = json.serialize(contents, indent)
    fs.write_file(f_name, c)
}
