let http.constants = {
    "STATUS_CODES": {
        "Continue": 100,
        "Switching Protocols": 101,
        "Processing": 102,
        "Early Hints": 103,
        "OK": 200,
        "Created": 201,
        "Accepted": 202,
        "Non-Authoritative Information": 203,
        "No Content": 204,
        "Reset Content": 205,
        "Partial Content": 206,
        "Multi-Status": 207,
        "Already Reported": 208,
        "IM Used": 226,
        "Multiple Choices": 300,
        "Moved Permanently": 301,
        "Found": 302,
        "See Other": 303,
        "Not Modified": 304,
        "Use Proxy": 305,
        "Temporary Redirect": 307,
        "Permanent Redirect": 308,
        "Bad Request": 400,
        "Unauthorized": 401,
        "Payment Required": 402,
        "Forbidden": 403,
        "Not Found": 404,
        "Method Not Allowed": 405,
        "Not Acceptable": 406,
        "Proxy Authentication Required": 407,
        "Request Timeout": 408,
        "Conflict": 409,
        "Gone": 410,
        "Length Required": 411,
        "Precondition Failed": 412,
        "Payload Too Large": 413,
        "URI Too Long": 414,
        "Unsupported Media Type": 415,
        "Range Not Satisfiable": 416,
        "Expectation Failed": 417,
        "I'm a Teapot": 418,
        "Misdirected Request": 421,
        "Unprocessable Entity": 422,
        "Locked": 423,
        "Failed Dependency": 424,
        "Too Early": 425,
        "Upgrade Required": 426,
        "Precondition Required": 428,
        "Too Many Requests": 429,
        "Request Header Fields Too Large": 431,
        "Unavailable For Legal Reasons": 451,
        "Internal Server Error": 500,
        "Not Implemented": 501,
        "Bad Gateway": 502,
        "Service Unavailable": 503,
        "Gateway Timeout": 504,
        "HTTP Version Not Supported": 505,
        "Variant Also Negotiates": 506,
        "Insufficient Storage": 507,
        "Loop Detected": 508,
        "Bandwidth Limit Exceeded": 509,
        "Not Extended": 510,
        "Network Authentication Required": 511
    },

    "METHODS": [
        "ACL",
        "BIND",
        "CHECKOUT",
        "CONNECT",
        "COPY",
        "DELETE",
        "GET",
        "HEAD",
        "LINK",
        "LOCK",
        "M-SEARCH",
        "MERGE",
        "MKACTIVITY",
        "MKCALENDAR",
        "MKCOL",
        "MOVE",
        "NOTIFY",
        "OPTIONS",
        "PATCH",
        "POST",
        "PROPFIND",
        "PROPPATCH",
        "PURGE",
        "PUT",
        "REBIND",
        "REPORT",
        "SEARCH",
        "SOURCE",
        "SUBSCRIBE",
        "TRACE",
        "UNBIND",
        "UNLINK",
        "UNLOCK",
        "UNSUBSCRIBE"
    ]
}

let http.server = fn () {
    'http.server returns a new app instance.'
    let instance = http.create_server()
    let e = core.event_emitter()
    let error_key = "error"
    let emit_error = fn (v) { e.emit(error_key, v) }

    mutable middleware = []

    let apply_middleware = fn (req) {
        foreach m in middleware {
            let x = m(req)
            if util.error?(x) emit_error(x)
        }
    }

    return {
        "emit": fn (ev, d) {
            'emit takes an event name and and emits the data at that name.'
            e.emit(ev, d)
        },

        "on": fn (ev, cb) {
            'on takes an event name and a callback to subscribe to.'
            e.subscribe(ev, cb)
        },

        "error": fn (cb) {
            'error takes a callback to subscribe to the error event.'
            e.subscribe(error_key, cb)
        },

        "use": fn (cb) {
            'use takes a callback which takes a request and does something
            with it, such as logging. Note that the req object cannot be
            modified, and use does not apply to http.server().static.'
            middleware = middleware.append(cb)
        },

        "log": fn () {
            'log registers a json request logger on the app.'
            middleware = middleware.append(fn (req) {
                print(json.serialize(req))
            })
        },

        "route": fn () {
            'route takes a path, methods, and callback.
            Path can be a string or regex. If methods are not provided,
            the default will be GET. The callback takes a request object and
            should return a body, status code, content type, and/or headers.'
            let opts = util.array_from(...)

            mutable path = ""
            mutable mets = ["GET"]
            mutable handler = fn () { true }

            path = opts[0]
            if util.len(opts) == 3 {
                mets = opts[1]
                handler = opts[2]
            } else if util.len(opts) == 2 {
                handler = opts[1]
            }

            instance.route(path, mets, fn (req) {
                apply_middleware(req)
                let x = handler(req)
                if util.error?(x) emit_error(x)
                else return x
            })
        },

        "listen": fn () {
            'listen takes a port number and an optional callback,
            which is passed the same port.'
            let opts = util.array_from(...)

            if util.len(opts) > 1 {
                opts[1](opts[0])
                instance.listen(opts[0])
            } else {
                instance.listen(opts[0])
            }
        },

        "static": fn () {
            'static takes a directory to serve and an optional mount point.'
            let opts = util.array_from(...)

            if util.len(opts) > 1 {
                instance.static(opts[0], opts[1])
            } else {
                instance.static(opts[0])
            }
        }
    }
}

let http.client = fn () {
    'http.client returns a new http client with convenience methods
    for making requests. See also http.create_client.
    Each method returned by http.client() takes a url, optionally headers as a
    hash, and optionally a body.'
    let r = http.create_client

    return {
        "get": fn () {
            'get is a convenience method for making GET requests.'
            let opts = util.array_from(...)
            return r("GET", opts[0], opts[1], opts[2])
        },

        "post": fn () {
            'post is a convenience method for making POST requests.'
            let opts = util.array_from(...)
            return r("POST", opts[0], opts[1], opts[2])
        },

        "put": fn () {
            'put is a convenience method for making PUT requests.'
            let opts = util.array_from(...)
            return r("PUT", opts[0], opts[1], opts[2])
        },

        "patch": fn () {
            'patch is a convenience method for making PATCH requests.'
            let opts = util.array_from(...)
            return r("PATCH", opts[0], opts[1], opts[2])
        },

        "del": fn () {
            'del is a convenience method for making DELETE requests.'
            let opts = util.array_from(...)
            return r("DELETE", opts[0], opts[1], opts[2])
        },

        "options": fn () {
            'options is a convenience method for making OPTIONS requests.'
            let opts = util.array_from(...)
            return r("OPTIONS", opts[0], opts[1], opts[2])
        },

        "head": fn () {
            'head is a convenience method for making HEAD requests.'
            let opts = util.array_from(...)
            return r("HEAD", opts[0], opts[1], opts[2])
        },
    }
}
