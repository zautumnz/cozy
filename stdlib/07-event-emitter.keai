let core.event_emitter = fn () {
    'event_emitter returns an object containing methods for managing events.'
    mutable events = {}
    let data = {
        "subscribe": fn (name, f) {
            'subscribe takes an event name and a function,
            and subscribes that function to emitted events with that name.'
            if (!events.keys().includes?(name)) {
                events = events.set(name, [f])
            } else {
                mutable ets = events[name]
                ets = ets.append(f)
                events = events.set(name, ets)
            }
        },
        "emit": fn (name, x) {
            'emit takes an event name and a value and calls all
            subscribed functions with that value.'
            foreach f in events[name] {
                f(x)
            }
        },
        "get_events": fn () {
            'get_events returns all events'
            return events
        }
    }

    return data
}
